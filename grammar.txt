program ::= extern_list decl_list 
          | decl_list

extern_list ::= extern extern_list'
extern_list' ::= extern extern_list'
               | epsilon

extern ::= "extern" type_spec IDENT "(" params ")" ";"

decl_list ::= decl decl_list'
decl_list' ::= decl decl_list'
             | epsilon

decl ::= var_decl
       | fun_decl

var_decl ::= var_type IDENT ";"

type_spec ::= "void"
            | var_type

var_type ::= "int"
           | "float"
           | "bool"

fun_decl ::= type_spec IDENT "(" params ")" block

params ::= param_list
         | "void"
         | epsilon

param_list ::= param param_list'
param_list' ::= "," param param_list' 
              | epsilon

param ::= var_type IDENT

block ::= "{" local_decls stmt_list "}"

local_decls ::= local_decl local_decls'

local_decls' ::= local_decl local_decls' | epsilon

local_decl ::= var_type IDENT ";"

stmt_list ::= stmt stmt_list'

stmt_list' ::= stmt stmt_list' | epsilon

stmt ::= expr_stmt
       | block
       | if_stmt
       | while_stmt
       | return_stmt

expr_stmt ::= expr ";"
            | ";"

while_stmt ::= "while" "(" expr ")" stmt

if_stmt ::= "if" "(" expr ")" block else_stmt

else_stmt ::= "else" block
            | epsilon

return_stmt ::= "return" ";"
              | "return" expr ";"

expr ::= assign_expr

assign_expr ::= IDENT "=" assign_expr  
              | logic_or

logic_or ::= logic_and logic_or'
logic_or' ::= "||" logic_and logic_or'
            | epsilon

logic_and ::= equality logic_and'
logic_and' ::= "&&" equality logic_and'
             | epsilon

equality ::= relation equality'
equality' ::= ("==" | "!=") relation equality'
            | epsilon

relation ::= additive relation'
relation' ::= ("<=" | "<" | ">=" | ">") additive relation'
            | epsilon

additive ::= multiply additive'
additive' ::= ("+" | "-") multiply additive'
            | epsilon

multiply ::= unary multiply'
multiply' ::= ("*" | "/" | "%") unary multiply'
            | epsilon

unary ::= ("-" | "!") unary
        | primary

primary ::= "(" expr ")"
          | IDENT
          | IDENT "(" args ")"
          | INT_LIT
          | FLOAT_LIT
          | BOOL_LIT

args ::= arg_list
       | epsilon

arg_list ::= expr arg_list'
arg_list' ::= "," expr arg_list'
            | epsilon